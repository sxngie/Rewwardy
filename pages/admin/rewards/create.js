import { useState } from "react";
import styles from "@/styles/admin/rewards/create.module.css";
import {
  Select,
  TextField,
  MenuItem,
  Button,
  InputLabel,
  Input,
  FormControl,
} from "@mui/material";
import { Inter } from "next/font/google";
import Head from "next/head";
import { inputLabelClasses } from "@mui/material/InputLabel";
import { AdminHamburgerMenu, AdminFooter } from "@/components";
import InputAdornment from "@mui/material/InputAdornment";
import { getCookie } from "cookies-next";
import { db } from "@/firebase";
import { collection, addDoc } from "firebase/firestore";
import { useRouter } from "next/router";

const inter = Inter({ subsets: ["latin"] });

export default function CreateReward() {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [milestoneType, setMilestoneType] = useState("");
  const [milestoneValue, setMilestoneValue] = useState(10);
  const [validFrom, setValidFrom] = useState("");
  const [validUntil, setValidUntil] = useState("");

  const router = useRouter();
  const businessid = getCookie("businessId");

  const createReward = async () => {
    await addDoc(collection(db, "business_rewards"), {
      name: name,
      description: description,
      milestoneType: milestoneType,
      milestoneValue: milestoneValue,
      validFrom: validFrom,
      validUntil: validUntil,
      businessId: businessid,
    })
      .then((data) => {
        alert(`You have created a Reward!\nReward ID: ${data.id}`);
        router.push("/admin/rewards");
      })
      .catch((err) => alert(err.message));
  };
  return (
    <>
      <Head>
        <title>Rewwardy: Create Reward</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Images/Rewwardy-Icon.png" />
      </Head>
      <AdminHamburgerMenu className={styles.shapingBar}/>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.headerbar}>
          <h1 >Create Reward</h1>
        </div>
        <div className={styles.form}>
          <TextField
            label="Name"
            variant="standard"
            value={name}
            onChange={(e) => setName(e.target.value)}
            InputLabelProps={{
              sx: {
                color: "#552CB4",
                [`&.${inputLabelClasses.shrink}`]: {
                  color: "#552CB4",
                },
              },
            }}
          />
          <br />
          <TextField
            label="Description"
            variant="standard"
            multiline
            rows={5}
            value={description}
            InputLabelProps={{
              sx: {
                color: "#552CB4",
                [`&.${inputLabelClasses.shrink}`]: {
                  color: "#552CB4",
                },
              },
            }}
            onChange={(e) => setDescription(e.target.value)}
          />
          <br />
          <InputLabel htmlFor="Milestone-type" >Milestone Type</InputLabel>

          <Select
            value={milestoneType}
            label="Select-Milestone-Type"
            className={styles.select}
            onChange={(e) => setMilestoneType(e.target.value)}
          >
            <MenuItem label="Money Spent" value={"money_spent"}>Money Spent</MenuItem>
            <MenuItem label="Visits" value={"visits"}>Visits</MenuItem>
            <MenuItem label="Quantity " value={"quantity"}>Quantity</MenuItem>
          </Select>
          <br />
          <FormControl fullWidth sx={{ m: 1 }} variant="standard">
            <InputLabel htmlFor="standard-adornment-amount">Amount</InputLabel>
            <Input
              id="standard-adornment-amount"
              startAdornment={
                milestoneType == "money_spent" && (
                  <InputAdornment position="start">$</InputAdornment>
                )
              }
            />
          </FormControl>

          <br />
          <label className={styles.label}>
            Valid From
            <br />
            <input
              type="date"
              value={validFrom}
              className={styles.dateinput}
              onChange={(e) => setValidFrom(e.target.value)}
            />
          </label>
          <br />
          <label className={styles.label}>
            Valid Until
            <br />
            <input
              type="date"
              value={validUntil}
              className={styles.dateinput}
              onChange={(e) => setValidUntil(e.target.value)}
            />
          </label>
          <br />
          <div className={styles.btnrow}>
            <Button
              variant="contained"
              className={styles.btn}
              onClick={() => createReward()}
            >
              Create Reward
            </Button>
          </div>
        </div>
      </main>
      <AdminFooter />
    </>
  );
}
